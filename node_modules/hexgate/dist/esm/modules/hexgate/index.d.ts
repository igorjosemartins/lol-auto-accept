import type { Middleware } from '@cuppachino/openapi-fetch';
import type { HexgateBuild, HexgateFetcher } from '../../types/hexgate/fetcher.js';
import type { Credentials } from '../../types/tokens.js';
import { baseUrl } from '../../utils/base-url.js';
import { hexgateSymbol } from './symbol.js';
/**
 * The main Hexgate class.
 *
 * @param credentials The `Credentials` object to use for requests.
 *
 * @example
 * ```ts
 * import { auth, poll, Hexgate } from 'hexgate'
 *
 * const credentials = await auth()
 * const hexgate = new Hexgate(credentials)
 *
 * const getSummonersByName = hexgate
 *   .build('/lol-summoner/v2/summoners/names')
 *   .method('post')
 *   .create()
 *
 * const summoners = await getSummonersByName(['dubbleignite'])
 * console.table(summoners)
 * ```
 */
export declare class Hexgate {
    /**
     * The base URL constructed from the credentials.
     */
    baseUrl: ReturnType<typeof baseUrl>;
    /**
     * The internal hexgate symbol used to identify the instance.
     */
    protected readonly [hexgateSymbol]: symbol;
    constructor(credentials: Credentials);
    /**
     * Build a request function for an LCU path and one of its methods.
     * @param path The path to build a request function for.
     *
     * @example
     * ```ts
     * const getSummonersByName = hexgate
     *   .build('/lol-summoner/v2/summoners/names')
     *   .method('post')
     *   .create()
     *
     * const summoners = await getSummonersByName(['dubbleignite'])
     * console.table(summoners)
     * ```
     */
    build: HexgateBuild;
    /**
     * Add a middleware to the Hexgate instance.
     * @todo hexgate doesn't have any middleware tricks yet.
     */
    use: (mw: Middleware) => number;
    /**
     * Internal wrapper for `Fetcher.for<LcuPaths>`
     * @internal
     */
    protected static forLcu: () => HexgateFetcher;
    /**
     * Internal fetcher
     * @internal
     */
    protected lcu: HexgateFetcher;
}
export default Hexgate;
export * from './create.js';
export * from './symbol.js';
