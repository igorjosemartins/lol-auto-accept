import { extractDefined } from '../../utils/extract-defined.js';
import { Heartbeat } from '../../utils/heartbeat.js';
import { Observable } from '../../utils/observable.js';
import { poll } from '../../utils/poll.js';
import { auth } from '../auth/index.js';
import { Hexgate as HttpsClient } from '../hexgate/index.js';
import { createRecipe } from '../recipe/index.js';
import { LcuClient as WsClient } from '../websocket/index.js';
export class Connection {
    #options = {
        interval: 1500,
        logger: console
    };
    status = new Observable('disconnected');
    credentials = null;
    https = null;
    ws = null;
    recipe = null;
    get #recipe() {
        return this.#options.recipe;
    }
    get logger() {
        return this.#options.logger;
    }
    constructor(options) {
        Object.assign(this.#options, extractDefined(options));
        if (this.#options.createRecipe instanceof Function) {
            this.#options.recipe = createRecipe(this.#options.createRecipe);
        }
        this.status.subscribe((status, prev) => {
            if (status !== prev) {
                options?.onStatusChange?.(status, prev);
                if (status === 'connected' && prev !== 'connected' && this.isOk()) {
                    this.#options.onConnect?.(this);
                }
                if (status === 'disconnected' && prev !== 'disconnected') {
                    this.#options.onDisconnect?.(this);
                }
            }
        });
    }
    async connect() {
        try {
            const credentials = await poll(auth, this.#options.interval, undefined);
            this.#options.logger.debug(this.credentials, 'credentials');
            this.update(credentials);
        }
        catch (e) {
            this.update();
            this.#options.logger.error(e);
        }
        return this;
    }
    isOk() {
        return !!this.ws && !!this.https && !!this.credentials;
    }
    ok() {
        if (this.isOk()) {
            return this;
        }
        return undefined;
    }
    update(credentials) {
        if (credentials) {
            this.status.value = 'connecting';
            this.credentials = credentials;
            this.https = new HttpsClient(credentials);
            this.recipe = this.#recipe?.(this.https) ?? null;
            this.#ping = Connection.#pingWith(this.https);
            this.#heartbeat.start();
        }
        else {
            this.status.value = 'disconnected';
            this.credentials = null;
            this.https = null;
            this.recipe = null;
            this.#ping = null;
            this.ws = null;
            this.#heartbeat.stop();
        }
    }
    static #pingWith = createRecipe(({ build }) => build('/lol-summoner/v1/current-summoner').method('get').create());
    #ping = null;
    #heartbeat = new Heartbeat(async () => {
        try {
            const isOk = (await this.#ping?.())?.ok;
            if (isOk && this.status.value !== 'connected') {
                this.ws = new WsClient(this.credentials)
                    .on('close', () => this.update())
                    .on('open', () => {
                    this.status.value = 'connected';
                    this.#heartbeat.stop();
                });
            }
            else {
                this.update();
                this.#heartbeat.stop();
            }
        }
        catch (e) {
            this.update();
            this.#heartbeat.stop();
        }
    }, this.#options.interval);
}
export default Connection;
export * from './lcu-value.js';
