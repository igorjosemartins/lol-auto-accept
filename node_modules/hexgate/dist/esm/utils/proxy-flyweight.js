/**
 * Create a flyweight proxy by supplying a record of async handlers.
 *
 * The first time a property is accessed, the handler is called and the result is stored in the proxy.
 * Subsequent visits to the property will return the stored result, but note that the value will always be wrapped in a promise.
 */
export const proxyFlyweight = (handlers) => {
    return new Proxy({}, {
        get(target, prop) {
            console.log('get', prop);
            if (!Reflect.has(target, prop) && prop in handlers) {
                Reflect.set(target, prop, handlers[prop]());
                return Reflect.get(target, prop);
            }
            else {
                return Reflect.get(target, prop);
            }
        }
    });
};
