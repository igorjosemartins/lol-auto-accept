"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.poll = void 0;
const poll_timeout_js_1 = require("../errors/poll-timeout.js");
/**
 * Retry a function until an error is not thrown.
 * @param fn - The function to retry.
 * @param interval - The interval in milliseconds to wait between retries. Default is 2000 ms.
 * @param max - The maximum number of retries. If undefined, will retry indefinitely.
 * @param onRetry - A function to execute after each failed attempt.
 *
 * @example
 * ```ts
 * const credentials = await poll(authenticate, 2000, 5, (n) => console.log(`attempt ${n}`))
 * ```
 */
async function poll(fn, interval = 2000, max, onRetry) {
    let attempts = 0;
    let result = null;
    while (result === null) {
        attempts++;
        try {
            result = await fn();
        }
        catch (e) {
            if (max !== undefined) {
                if (max <= 0) {
                    throw new poll_timeout_js_1.PollTimeoutError();
                }
                max--;
            }
            onRetry?.(attempts);
            await new Promise((resolve) => setTimeout(resolve, interval));
        }
    }
    return result;
}
exports.poll = poll;
