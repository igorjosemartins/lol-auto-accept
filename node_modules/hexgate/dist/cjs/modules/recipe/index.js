"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRecipe = exports.isRecipeFn = exports.CreateWithRecipe = void 0;
const api_js_1 = require("./api.js");
const symbol_js_1 = require("./symbol.js");
/**
 * Base class that can be constructed with either a recipe or a recipe api function.
 * @example
 * ```ts
 * class CreateWithRecipe<T> {
 *   protected recipe: Recipe<() => Promise<T>>
 *   constructor(recipe: Recipe<() => Promise<T>>)
 *   constructor(api: RecipeApiFn<() => Promise<T>>)
 *   constructor(recipe: Recipe<() => Promise<T>> | RecipeApiFn<() => Promise<T>>) {
 *     if (!isRecipeFn<() => Promise<T>>(recipe)) {
 *       recipe = createRecipe(recipe)
 *     }
 *     this.recipe = recipe
 *   }
 * }
 * ```
 */
class CreateWithRecipe {
    recipe;
    constructor(recipe) {
        if (!isRecipeFn(recipe)) {
            recipe = createRecipe(recipe);
        }
        this.recipe = recipe;
    }
}
exports.CreateWithRecipe = CreateWithRecipe;
/**
 * Check if a function is a recipe created with `createRecipe`.
 */
function isRecipeFn(fn) {
    return typeof fn === 'function' && (0, symbol_js_1.extractRecipeSymbol)(fn) !== undefined;
}
exports.isRecipeFn = isRecipeFn;
/**
 * Create a recipe for a Hexgate instance.
 *
 * ### Recipe API
 *
 * The first argument of the `api` callback is an object with following methods:
 *
 * - `build` - The build method of the Hexgate instance. Use this to construct a typed request function.
 * - `wrap` - Use this to wrap a function, and transform it's parameters and return values with automatic type inference.
 * - `unwrap` - Returns a new function that unwraps the response of the supplied function.
 * - `from` - Returns empty arguments.
 * - `to` - Use this to unwrap a response, and transform it's data with automatic type inference.
 * - `once` - Use this to create a flyweight proxy by supplying a record of async handlers. The first time a property is accessed, the handler is called, the result is cached, and the promise is returned. Subsequent accesses will return the cached promise.
 * - `result` - Which can be used to represent a successful or failed request. See the `result` utility function for more information.
 * @returns The recipe, which takes a `Hexgate` instance and returns `U`.
 */
function createRecipe(api) {
    const recipeFn = (hexgate) => api(new api_js_1.RecipeApi(hexgate));
    recipeFn[symbol_js_1.recipeSymbol] = Symbol('unique identifier for recipe');
    return recipeFn;
}
exports.createRecipe = createRecipe;
exports.default = createRecipe;
__exportStar(require("./api.js"), exports);
__exportStar(require("./symbol.js"), exports);
