import { WebSocket } from 'ws';
import type { Credentials } from '../../types/tokens.js';
import type { LcuEvent, LcuEventLookup } from '../../types/dto/lcu-event-lookup.js';
import type { LobbyEvent } from '../../types/dto/lobby.js';
type RecordToCallbacks<T> = {
    [K in keyof T]: ({ data, eventType, uri }: {
        data: T[K];
        eventType: 'Update' | 'Create' | 'Delete';
        uri: string;
    }) => void;
};
type LcuWebSocketEventCallbacks = Omit<RecordToCallbacks<LcuEventLookup>, 'OnJsonApiEvent_lol-lobby_v2_lobby'> & {
    'OnJsonApiEvent_lol-lobby_v2_lobby': (event: LobbyEvent) => void;
};
export interface ILcuClient {
    eventListeners: Partial<Record<LcuEvent, Array<LcuWebSocketEventCallbacks[LcuEvent]>>>;
    subscribe<T extends LcuEvent>(event: T, callback: LcuWebSocketEventCallbacks[T]): void;
    unsubscribe<T extends LcuEvent>(event: T, callback: LcuWebSocketEventCallbacks[T]): void;
    unsubscribeAll(event?: LcuEvent): void;
}
export declare class LcuClient extends WebSocket implements ILcuClient {
    eventListeners: Partial<Record<LcuEvent, Array<LcuWebSocketEventCallbacks[LcuEvent]>>>;
    constructor(credentials: Credentials);
    private publish;
    subscribe<T extends keyof LcuEventLookup>(event: T, listener: LcuWebSocketEventCallbacks[T]): void;
    unsubscribe(event: LcuEvent): void;
    unsubscribeAll(event?: LcuEvent): void;
}
export declare function createLcuClient(credentials: Credentials): LcuClient;
export {};
