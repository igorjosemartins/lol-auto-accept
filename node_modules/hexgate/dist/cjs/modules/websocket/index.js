"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLcuClient = exports.LcuClient = void 0;
const ws_1 = require("ws");
const headers_js_1 = require("../auth/headers.js");
class LcuClient extends ws_1.WebSocket {
    eventListeners = {};
    constructor(credentials) {
        const url = `wss://127.0.0.1:${credentials.appPort}/`;
        const options = {
            headers: (0, headers_js_1.createHeaders)(credentials),
            rejectUnauthorized: credentials.certificate ? true : false,
            ca: credentials.certificate
        };
        super(url, options);
        this.eventListeners = {};
        this.addListener('message', this.publish.bind(this));
    }
    publish(data) {
        const [eventCode, eventType, eventData] = (() => {
            try {
                const json = JSON.parse(data.toString());
                if (json[0] === 8) {
                    return json;
                }
            }
            catch (error) {
                // console.error(error)
            }
            return [0, undefined, undefined];
        })();
        if (eventCode) {
            const listeners = this.eventListeners[eventType];
            if (listeners) {
                listeners.forEach((listener) => listener(eventData));
            }
        }
    }
    subscribe(event, listener) {
        const isOpen = this.readyState === ws_1.WebSocket.OPEN;
        if (!isOpen) {
            this.once('open', () => this.subscribe(event, listener));
            return;
        }
        this.send(JSON.stringify([5, event]));
        if (!this.eventListeners[event]) {
            this.eventListeners[event] = [];
        }
        this.eventListeners[event]?.push(listener);
    }
    unsubscribe(event) {
        this.eventListeners[event] = undefined;
        if (this.readyState !== ws_1.WebSocket.OPEN)
            return;
        this.send(JSON.stringify([6, event]));
    }
    unsubscribeAll(event) {
        if (this.readyState === ws_1.WebSocket.OPEN) {
            if (!event) {
                Object.keys(this.eventListeners).forEach((event) => {
                    this.send(JSON.stringify([6, event]));
                });
            }
            else {
                this.send(JSON.stringify([6, event]));
            }
        }
        this.eventListeners = {};
    }
}
exports.LcuClient = LcuClient;
function createLcuClient(credentials) {
    return new LcuClient(credentials);
}
exports.createLcuClient = createLcuClient;
