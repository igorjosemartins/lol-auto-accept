"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connection = void 0;
const extract_defined_js_1 = require("../../utils/extract-defined.js");
const heartbeat_js_1 = require("../../utils/heartbeat.js");
const observable_js_1 = require("../../utils/observable.js");
const poll_js_1 = require("../../utils/poll.js");
const index_js_1 = require("../auth/index.js");
const index_js_2 = require("../hexgate/index.js");
const index_js_3 = require("../recipe/index.js");
const index_js_4 = require("../websocket/index.js");
class Connection {
    #options = {
        interval: 1500,
        logger: console
    };
    status = new observable_js_1.Observable('disconnected');
    credentials = null;
    https = null;
    ws = null;
    recipe = null;
    get #recipe() {
        return this.#options.recipe;
    }
    get logger() {
        return this.#options.logger;
    }
    constructor(options) {
        Object.assign(this.#options, (0, extract_defined_js_1.extractDefined)(options));
        if (this.#options.createRecipe instanceof Function) {
            this.#options.recipe = (0, index_js_3.createRecipe)(this.#options.createRecipe);
        }
        this.status.subscribe((status, prev) => {
            if (status !== prev) {
                options?.onStatusChange?.(status, prev);
                if (status === 'connected' && prev !== 'connected' && this.isOk()) {
                    this.#options.onConnect?.(this);
                }
                if (status === 'disconnected' && prev !== 'disconnected') {
                    this.#options.onDisconnect?.(this);
                }
            }
        });
    }
    async connect() {
        try {
            const credentials = await (0, poll_js_1.poll)(index_js_1.auth, this.#options.interval, undefined);
            this.#options.logger.debug(this.credentials, 'credentials');
            this.update(credentials);
        }
        catch (e) {
            this.update();
            this.#options.logger.error(e);
        }
        return this;
    }
    isOk() {
        return !!this.ws && !!this.https && !!this.credentials;
    }
    ok() {
        if (this.isOk()) {
            return this;
        }
        return undefined;
    }
    update(credentials) {
        if (credentials) {
            this.status.value = 'connecting';
            this.credentials = credentials;
            this.https = new index_js_2.Hexgate(credentials);
            this.recipe = this.#recipe?.(this.https) ?? null;
            this.#ping = Connection.#pingWith(this.https);
            this.#heartbeat.start();
        }
        else {
            this.status.value = 'disconnected';
            this.credentials = null;
            this.https = null;
            this.recipe = null;
            this.#ping = null;
            this.ws = null;
            this.#heartbeat.stop();
        }
    }
    static #pingWith = (0, index_js_3.createRecipe)(({ build }) => build('/lol-summoner/v1/current-summoner').method('get').create());
    #ping = null;
    #heartbeat = new heartbeat_js_1.Heartbeat(async () => {
        try {
            const isOk = (await this.#ping?.())?.ok;
            if (isOk && this.status.value !== 'connected') {
                this.ws = new index_js_4.LcuClient(this.credentials)
                    .on('close', () => this.update())
                    .on('open', () => {
                    this.status.value = 'connected';
                    this.#heartbeat.stop();
                });
            }
            else {
                this.update();
                this.#heartbeat.stop();
            }
        }
        catch (e) {
            this.update();
            this.#heartbeat.stop();
        }
    }, this.#options.interval);
}
exports.Connection = Connection;
exports.default = Connection;
__exportStar(require("./lcu-value.js"), exports);
