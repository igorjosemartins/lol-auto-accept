import type { Update } from '../../types/update.js';
import type { Hexgate } from '../hexgate/index.js';
import { CreateWithRecipe } from '../recipe/index.js';
/**
 * Non-nullable version of `LcuValue`. This means that the `inner` property is guaranteed to be non-null.
 */
export interface SafeLcuValue<T> extends LcuValue<T> {
    inner: NonNullable<LcuValue<T>['inner']>;
}
/**
 * A container for a value that needs to be fetched from the LCU.
 *
 * @method `update` - Either fetches the value from the LCU, or nullifies the `inner` value.
 */
export declare class LcuValue<T> extends CreateWithRecipe<T> implements Update<SafeLcuValue<T>, Hexgate> {
    inner: T | null;
    /**
     * Update the value.
     */
    update(httpsClient: Hexgate | null): Promise<this>;
    /**
     * Assert that the `inner` value is not null.
     * @throws Error
     */
    assertOk(): asserts this is this & SafeLcuValue<T>;
    /**
     * Check if the `inner` value is not null.
     */
    isOk(): this is this & SafeLcuValue<T>;
    /**
     * Returns `this` if the `inner` value is not null, otherwise returns `undefined`. This is useful for chaining.
     */
    ok(): (this & SafeLcuValue<T>) | undefined;
}
