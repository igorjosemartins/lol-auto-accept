/// <reference types="node" />
import type { Update } from '../../types/update.js';
import type { BaseLogger } from '../../types/base-logger.js';
import type { Credentials } from '../../types/tokens.js';
import { Observable } from '../../utils/observable.js';
import { Hexgate as HttpsClient } from '../hexgate/index.js';
import type { RecipeApi } from '../recipe/api.js';
import { type Recipe } from '../recipe/index.js';
import { LcuClient as WsClient } from '../websocket/index.js';
export type ResolveLogger<T extends BaseLogger | undefined> = undefined extends T ? Console : NonNullable<T>;
export type ConnectionStatus = 'disconnected' | 'connected' | 'connecting';
export interface ConnectionOptions<Logger extends BaseLogger | undefined> {
    /**
     * @default 1500 ms
     */
    interval: number;
    /**
     * @default Console
     */
    logger: Logger;
}
export type ConnectionMethods<Logger extends BaseLogger, R> = {
    onConnect: (con: SafeConnection<Logger, R>) => void;
    onDisconnect: (discon: UnsafeConnection<Logger, R>) => void;
    onStatusChange: (status: ConnectionStatus, prev: ConnectionStatus) => void;
} & ({
    createRecipe({ build, wrap, to, unwrap, ...api }: RecipeApi): R;
    recipe: 'createRecipe is already defined. You may choose between createRecipe and recipe, but you cannot use both.';
} | {
    recipe: Recipe<R>;
    createRecipe: 'recipe is already defined. You may choose between createRecipe and recipe, but you cannot use both.';
});
export type ConnectionConfig<Logger extends BaseLogger | undefined, R> = ConnectionOptions<Logger> & ConnectionMethods<ResolveLogger<Logger>, R>;
export interface SafeConnection<Logger extends BaseLogger | undefined, R> extends Connection<Logger, R> {
    ws: NonNullable<Connection<Logger, R>['ws']>;
    https: NonNullable<Connection<Logger, R>['https']>;
    credentials: NonNullable<Connection<Logger, R>['credentials']>;
    recipe: NonNullable<R>;
}
export interface UnsafeConnection<Logger extends BaseLogger | undefined, R> extends Connection<Logger, R> {
    ws: null;
    https: null;
    credentials: null;
    recipe: null;
}
export declare class Connection<Logger extends BaseLogger | undefined, R = null> implements Update<SafeConnection<ResolveLogger<Logger>, R>, Credentials> {
    #private;
    status: Observable<ConnectionStatus>;
    credentials: Credentials | null;
    https: HttpsClient | null;
    ws: WsClient | null;
    recipe: R | null;
    get logger(): ResolveLogger<Logger>;
    constructor(options?: Partial<ConnectionConfig<Logger, R>>);
    connect(): Promise<this>;
    isOk(): this is this & SafeConnection<ResolveLogger<Logger>, R>;
    ok(): (this & SafeConnection<ResolveLogger<Logger>, R>) | undefined;
    update(credentials?: Credentials | null): void;
}
export default Connection;
export * from './lcu-value.js';
