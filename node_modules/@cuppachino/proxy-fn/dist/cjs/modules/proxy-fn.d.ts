import type { Assigned } from '../types/assigned.js';
import type { DefinitelyAwaited } from '../types/definitely-awaited.js';
import type { If } from '../types/if.js';
import type { IsEmpty } from '../types/is-empty.js';
import type { IsPromise } from '../types/is-promise.js';
import type { MaybePromise } from '../types/maybe-promise.js';
export type ProxyFnHandler<Fn extends (...args: any[]) => any> = <NewArgs extends any[] = Parameters<Fn>, NewReturnType = ReturnType<Fn>, ActualArgs extends MaybePromise<[...Parameters<Fn>, ...any[]]> = [...Parameters<Fn>]>(props: Partial<{
    from(...args: NewArgs): ActualArgs;
    to(res: ReturnType<Fn>): NewReturnType;
}>) => ProxyFn<NewArgs, If<IsPromise<ActualArgs>, Promise<DefinitelyAwaited<NewReturnType>>, NewReturnType>, Assigned<Fn>>;
/**
 * The Proxy returned by a `ProxyFnHandler`.
 *
 * @param NewArgs The arguments that the proxy function will receive.
 * @param NewReturnType The return type of the proxy function.
 * @param Properties The properties of the original function.
 */
export type ProxyFn<NewArgs extends any[], NewReturnType, Properties> = IsEmpty<Properties> extends true ? (...args: NewArgs) => NewReturnType : ((...args: NewArgs) => NewReturnType) & Properties;
/**
 * Curried proxy creator. Proxy a function, and optionally transform its arguments and/or return value.
 * @param fn The function to proxy.
 * @returns A function that accepts an object with `from` and `to` methods.
 */
export declare const proxyFn: <Fn extends (...args: any[]) => any>(fn: Fn) => ProxyFnHandler<Fn>;
